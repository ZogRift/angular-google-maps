import { fromEventPattern } from 'rxjs';
export function createMVCEventObservable(array) {
    const eventNames = ['insert_at', 'remove_at', 'set_at'];
    return fromEventPattern((handler) => eventNames.map(evName => array.addListener(evName, (index, previous) => handler.apply(array, [{ 'newArr': array.getArray(), evName, index, previous }]))), (_handler, evListeners) => evListeners.forEach(evListener => evListener.remove()));
}
export class MvcArrayMock {
    constructor() {
        this.vals = [];
        this.listeners = {
            'remove_at': [],
            'insert_at': [],
            'set_at': [],
        };
    }
    clear() {
        for (let i = this.vals.length - 1; i >= 0; i--) {
            this.removeAt(i);
        }
    }
    getArray() {
        return [...this.vals];
    }
    getAt(i) {
        return this.vals[i];
    }
    getLength() {
        return this.vals.length;
    }
    insertAt(i, elem) {
        this.vals.splice(i, 0, elem);
        this.listeners.insert_at.map(listener => listener(i));
    }
    pop() {
        const deleted = this.vals.pop();
        this.listeners.remove_at.map(listener => listener(this.vals.length, deleted));
        return deleted;
    }
    push(elem) {
        this.vals.push(elem);
        this.listeners.insert_at.map(listener => listener(this.vals.length - 1));
        return this.vals.length;
    }
    removeAt(i) {
        const deleted = this.vals.splice(i, 1)[0];
        this.listeners.remove_at.map(listener => listener(i, deleted));
        return deleted;
    }
    setAt(i, elem) {
        const deleted = this.vals[i];
        this.vals[i] = elem;
        this.listeners.set_at.map(listener => listener(i, deleted));
    }
    forEach(callback) {
        this.vals.forEach(callback);
    }
    addListener(eventName, handler) {
        const listenerArr = this.listeners[eventName];
        listenerArr.push(handler);
        return {
            remove: () => {
                listenerArr.splice(listenerArr.indexOf(handler), 1);
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXZjYXJyYXktdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvdXRpbHMvbXZjYXJyYXktdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFjLE1BQU0sTUFBTSxDQUFDO0FBR3BELE1BQU0sVUFBVSx3QkFBd0IsQ0FBSSxLQUFrQjtJQUM1RCxNQUFNLFVBQVUsR0FBRyxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDeEQsT0FBTyxnQkFBZ0IsQ0FDckIsQ0FBQyxPQUFpQixFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQ3RFLENBQUMsS0FBYSxFQUFFLFFBQVksRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBRSxFQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDbEksQ0FBQyxRQUFrQixFQUFFLFdBQWdDLEVBQUUsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3RILENBQUM7QUFXRCxNQUFNLE9BQU8sWUFBWTtJQUF6QjtRQUNVLFNBQUksR0FBUSxFQUFFLENBQUM7UUFDZixjQUFTLEdBS2I7WUFDRixXQUFXLEVBQUUsRUFBZ0I7WUFDN0IsV0FBVyxFQUFFLEVBQWdCO1lBQzdCLFFBQVEsRUFBRSxFQUFnQjtTQUMzQixDQUFDO0lBbURKLENBQUM7SUFsREMsS0FBSztRQUNILEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLENBQUM7SUFDSCxDQUFDO0lBQ0QsUUFBUTtRQUNOLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBQ0QsS0FBSyxDQUFDLENBQVM7UUFDYixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUNELFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzFCLENBQUM7SUFDRCxRQUFRLENBQUMsQ0FBUyxFQUFFLElBQU87UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBQ0QsR0FBRztRQUNELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDOUUsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUNELElBQUksQ0FBQyxJQUFPO1FBQ1YsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMxQixDQUFDO0lBQ0QsUUFBUSxDQUFDLENBQVM7UUFDaEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMvRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBQ0QsS0FBSyxDQUFDLENBQVMsRUFBRSxJQUFPO1FBQ3RCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFDRCxPQUFPLENBQUMsUUFBc0M7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUNELFdBQVcsQ0FBQyxTQUFpQixFQUFFLE9BQWlCO1FBQzlDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxQixPQUFPO1lBQ0gsTUFBTSxFQUFFLEdBQUcsRUFBRTtnQkFDVCxXQUFXLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDeEQsQ0FBQztTQUNKLENBQUM7SUFDSixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tRXZlbnRQYXR0ZXJuLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE1hcHNFdmVudExpc3RlbmVyLCBNVkNBcnJheSB9IGZyb20gJy4uL3NlcnZpY2VzL2dvb2dsZS1tYXBzLXR5cGVzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNVkNFdmVudE9ic2VydmFibGU8VD4oYXJyYXk6IE1WQ0FycmF5PFQ+KTogT2JzZXJ2YWJsZTxNVkNFdmVudDxUPj57XHJcbiAgY29uc3QgZXZlbnROYW1lcyA9IFsnaW5zZXJ0X2F0JywgJ3JlbW92ZV9hdCcsICdzZXRfYXQnXTtcclxuICByZXR1cm4gZnJvbUV2ZW50UGF0dGVybihcclxuICAgIChoYW5kbGVyOiBGdW5jdGlvbikgPT4gZXZlbnROYW1lcy5tYXAoZXZOYW1lID0+IGFycmF5LmFkZExpc3RlbmVyKGV2TmFtZSxcclxuICAgICAgKGluZGV4OiBudW1iZXIsIHByZXZpb3VzPzogVCkgPT4gaGFuZGxlci5hcHBseShhcnJheSwgWyB7J25ld0Fycic6IGFycmF5LmdldEFycmF5KCksIGV2TmFtZSwgaW5kZXgsIHByZXZpb3VzfSBhcyBNVkNFdmVudDxUPl0pKSksXHJcbiAgICAoX2hhbmRsZXI6IEZ1bmN0aW9uLCBldkxpc3RlbmVyczogTWFwc0V2ZW50TGlzdGVuZXJbXSkgPT4gZXZMaXN0ZW5lcnMuZm9yRWFjaChldkxpc3RlbmVyID0+IGV2TGlzdGVuZXIucmVtb3ZlKCkpKTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNVkNFdmVudDxUPiB7XHJcbiAgbmV3QXJyOiBUW107XHJcbiAgZXZOYW1lOiBNdmNFdmVudFR5cGU7XHJcbiAgaW5kZXg6IG51bWJlcjtcclxuICBwcmV2aW91cz86IFQ7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIE12Y0V2ZW50VHlwZSA9ICdpbnNlcnRfYXQnIHwgJ3JlbW92ZV9hdCcgfCAnc2V0X2F0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBNdmNBcnJheU1vY2s8VD4gaW1wbGVtZW50cyBNVkNBcnJheTxUPiB7XHJcbiAgcHJpdmF0ZSB2YWxzOiBUW10gPSBbXTtcclxuICBwcml2YXRlIGxpc3RlbmVyczoge1xyXG4gICAgJ3JlbW92ZV9hdCc6IEZ1bmN0aW9uW107XHJcbiAgICAnaW5zZXJ0X2F0JzogRnVuY3Rpb25bXTtcclxuICAgICdzZXRfYXQnOiBGdW5jdGlvbltdO1xyXG4gICAgW2tleTogc3RyaW5nXTogRnVuY3Rpb25bXTtcclxuICB9ID0ge1xyXG4gICAgJ3JlbW92ZV9hdCc6IFtdIGFzIEZ1bmN0aW9uW10sXHJcbiAgICAnaW5zZXJ0X2F0JzogW10gYXMgRnVuY3Rpb25bXSxcclxuICAgICdzZXRfYXQnOiBbXSBhcyBGdW5jdGlvbltdLFxyXG4gIH07XHJcbiAgY2xlYXIoKTogdm9pZCB7XHJcbiAgICBmb3IgKGxldCBpID0gdGhpcy52YWxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVBdChpKTtcclxuICAgIH1cclxuICB9XHJcbiAgZ2V0QXJyYXkoKTogVFtdIHtcclxuICAgIHJldHVybiBbLi4udGhpcy52YWxzXTtcclxuICB9XHJcbiAgZ2V0QXQoaTogbnVtYmVyKTogVCB7XHJcbiAgICByZXR1cm4gdGhpcy52YWxzW2ldO1xyXG4gIH1cclxuICBnZXRMZW5ndGgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnZhbHMubGVuZ3RoO1xyXG4gIH1cclxuICBpbnNlcnRBdChpOiBudW1iZXIsIGVsZW06IFQpOiB2b2lkIHtcclxuICAgIHRoaXMudmFscy5zcGxpY2UoaSwgMCwgZWxlbSk7XHJcbiAgICB0aGlzLmxpc3RlbmVycy5pbnNlcnRfYXQubWFwKGxpc3RlbmVyID0+IGxpc3RlbmVyKGkpKTtcclxuICB9XHJcbiAgcG9wKCk6IFQge1xyXG4gICAgY29uc3QgZGVsZXRlZCA9IHRoaXMudmFscy5wb3AoKTtcclxuICAgIHRoaXMubGlzdGVuZXJzLnJlbW92ZV9hdC5tYXAobGlzdGVuZXIgPT4gbGlzdGVuZXIodGhpcy52YWxzLmxlbmd0aCwgZGVsZXRlZCkpO1xyXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XHJcbiAgfVxyXG4gIHB1c2goZWxlbTogVCk6IG51bWJlciB7XHJcbiAgICB0aGlzLnZhbHMucHVzaChlbGVtKTtcclxuICAgIHRoaXMubGlzdGVuZXJzLmluc2VydF9hdC5tYXAobGlzdGVuZXIgPT4gbGlzdGVuZXIodGhpcy52YWxzLmxlbmd0aCAtIDEpKTtcclxuICAgIHJldHVybiB0aGlzLnZhbHMubGVuZ3RoO1xyXG4gIH1cclxuICByZW1vdmVBdChpOiBudW1iZXIpOiBUIHtcclxuICAgIGNvbnN0IGRlbGV0ZWQgPSB0aGlzLnZhbHMuc3BsaWNlKGksIDEpWzBdO1xyXG4gICAgdGhpcy5saXN0ZW5lcnMucmVtb3ZlX2F0Lm1hcChsaXN0ZW5lciA9PiBsaXN0ZW5lcihpLCBkZWxldGVkKSk7XHJcbiAgICByZXR1cm4gZGVsZXRlZDtcclxuICB9XHJcbiAgc2V0QXQoaTogbnVtYmVyLCBlbGVtOiBUKTogdm9pZCB7XHJcbiAgICBjb25zdCBkZWxldGVkID0gdGhpcy52YWxzW2ldO1xyXG4gICAgdGhpcy52YWxzW2ldID0gZWxlbTtcclxuICAgIHRoaXMubGlzdGVuZXJzLnNldF9hdC5tYXAobGlzdGVuZXIgPT4gbGlzdGVuZXIoaSwgZGVsZXRlZCkpO1xyXG4gIH1cclxuICBmb3JFYWNoKGNhbGxiYWNrOiAoZWxlbTogVCwgaTogbnVtYmVyKSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICB0aGlzLnZhbHMuZm9yRWFjaChjYWxsYmFjayk7XHJcbiAgfVxyXG4gIGFkZExpc3RlbmVyKGV2ZW50TmFtZTogc3RyaW5nLCBoYW5kbGVyOiBGdW5jdGlvbik6IE1hcHNFdmVudExpc3RlbmVyIHtcclxuICAgIGNvbnN0IGxpc3RlbmVyQXJyID0gdGhpcy5saXN0ZW5lcnNbZXZlbnROYW1lXTtcclxuICAgIGxpc3RlbmVyQXJyLnB1c2goaGFuZGxlcik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlbW92ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICBsaXN0ZW5lckFyci5zcGxpY2UobGlzdGVuZXJBcnIuaW5kZXhPZihoYW5kbGVyKSwgMSk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==